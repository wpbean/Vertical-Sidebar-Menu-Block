/*
 * A modified version of jQuery wpbeanNavgoco Menus Plugin v1.2 (Updated)
 * Updated to remove jQuery Cookie dependency and use localStorage by WPBean.
 */
(function($) {
    "use strict";

    var Plugin = function(el, options, idx) {
        this.el = el;
        this.$el = $(el);
        this.options = options;
        this.uuid = this.$el.attr('id') ? this.$el.attr('id') : idx;
        this.state = {};
        this.init();
        return this;
    };

    Plugin.prototype = {
		init: function() {
            var self = this;
        
            // Load saved state from localStorage
            self._load();
        
            // Iterate through all submenus
            self.$el.find('ul').each(function(idx) {
                var sub = $(this);
                sub.attr('data-index', idx); // Add a unique index to each submenu
        
                // Set aria-hidden based on saved or default state
                var isVisible = false;
        
                if (self.options.save && self.state.hasOwnProperty(idx)) {
                    sub.parent().addClass(self.options.openClass);
                    sub.show();
                    isVisible = true;
                } else if (
                    self.options.currentExpanded &&
                    (
                        self.options.currentClasses.some(function(cls) {
                            return sub.parent().hasClass(cls);
                        }) ||
                        sub.parent().hasClass(self.options.openClass)
                    )
                ) {
                    sub.parent().addClass(self.options.openClass);
                    sub.show();
                    self.state[idx] = 1;
                    isVisible = true;
                } else {
                    sub.hide();
                }
        
                sub.attr('aria-hidden', isVisible ? 'false' : 'true'); // Set aria-hidden
                sub.parent().attr('aria-expanded', isVisible ? 'true' : 'false'); // Set aria-expanded
            });
        
            // Add expand/collapse caret and bind events
            var caret = $('<span class="' + self.options.expandIcon + '"></span>').prepend(self.options.caretHtml);
            var links = self.$el.find("li > a");
        
            self._trigger(caret, false);
            self._trigger(links, true);
            self.$el.find("li:has(ul) > a").append(caret);
        
            // Add keyboard support
            self._addKeyboardSupport();
        },
        
        _addKeyboardSupport: function() {
            var self = this;
        
            self.$el.on('keydown', 'a', function(event) {
                var $currentLink = $(event.target);
                var $currentItem = $currentLink.closest('li');
                var $submenu     = $currentItem.children('ul');
                var isExpanded   = $currentItem.attr('aria-expanded') === 'true';
        
                switch (event.key) {
                    case 'ArrowDown': // Move to the next item
                        event.preventDefault();
                        self._focusNextItem($currentItem);
                        break;
                    case 'ArrowUp': // Move to the previous item
                        event.preventDefault();
                        self._focusPreviousItem($currentItem);
                        break;
                    case 'ArrowRight': // Expand submenu
                        if ($submenu.length && !isExpanded) {
                            event.preventDefault();
                            self._toggle($submenu, true);
                            $submenu.find('a').first().focus();
                        }
                        break;
                    case 'ArrowLeft': // Collapse submenu
                        if (isExpanded) {
                            event.preventDefault();
                            self._toggle($submenu, false);
                            $currentLink.focus();
                        } else {
                            var $parentItem = $currentItem.parents('li').first();
                            if ($parentItem.length) {
                                $parentItem.children('a').focus();
                            }
                        }
                        break;
                    case 'Enter':
                    case ' ': // Toggle submenu or activate link
                        if ($submenu.length) {
                            event.preventDefault();
                            self._toggle($submenu, !isExpanded);
                        }
                        break;
                    default:
                        break;
                }
            });
        },
        
        _focusNextItem: function($currentItem) {
            var $nextItem = $currentItem.nextAll('li:visible').first();
            if (!$nextItem.length) {
                $nextItem = $currentItem.closest('ul').children('li:visible').first();
            }
            $nextItem.children('a').focus();
        },
        
        _focusPreviousItem: function($currentItem) {
            var $prevItem = $currentItem.prevAll('li:visible').first();
            if (!$prevItem.length) {
                $prevItem = $currentItem.closest('ul').children('li:visible').last();
            }
            $prevItem.children('a').focus();
        },		
        _trigger: function(sources, isLink) {
            var self = this;
            sources.on('click', function(event) {
                event.stopPropagation();
                var sub = isLink ? $(this).next() : $(this).parent().next();
                var isAnchor = false;
                if (isLink) {
                    var href = $(this).attr('href');
                    isAnchor = href === undefined || href === '' || href === '#';
                }
                sub = sub.length > 0 ? sub : false;
                self.options.onClickBefore.call(this, event, sub);

                if (!isLink || (sub && isAnchor)) {
                    event.preventDefault();
                    self._toggle(sub, sub.is(":hidden"));
                    self._save();
                } else if (self.options.accordion) {
                    var allowed = self.state = self._parents($(this));
                    self.$el.find('ul').filter(':visible').each(function() {
                        var sub = $(this),
                            idx = sub.attr('data-index');

                        if (!allowed.hasOwnProperty(idx)) {
                            self._toggle(sub, false);
                        }
                    });
                    self._save();
                }
                self.options.onClickAfter.call(this, event, sub);
            });
        },
        _toggle: function(sub, open) {
            var self = this,
                idx = sub.attr('data-index'),
                parent = sub.parent(); // The <li> element containing the submenu
        
            self.options.onToggleBefore.call(this, sub, open);
        
            if (open) {
                parent.addClass(self.options.openClass);
                parent.attr('aria-expanded', 'true'); // Set aria-expanded to true
                sub.attr('aria-hidden', 'false');    // Set aria-hidden to false
                sub.slideDown(self.options.slide);
                self.state[idx] = 1;
        
                if (self.options.accordion) {
                    var allowed = self.state = self._parents(sub);
                    allowed[idx] = self.state[idx] = 1;
        
                    self.$el.find('ul').filter(':visible').each(function() {
                        var sub = $(this),
                            idx = sub.attr('data-index');
        
                        if (!allowed.hasOwnProperty(idx)) {
                            self._toggle(sub, false); // Close other submenus
                        }
                    });
                }
            } else {
                parent.removeClass(self.options.openClass);
                parent.attr('aria-expanded', 'false'); // Set aria-expanded to false
                sub.attr('aria-hidden', 'true');       // Set aria-hidden to true
                sub.slideUp(self.options.slide);
                self.state[idx] = 0;
            }
        
            self.options.onToggleAfter.call(this, sub, open);
        },
        _parents: function(sub, obj) {
            var result = {},
                parent = sub.parent(),
                parents = parent.parents('ul');

            parents.each(function() {
                var par = $(this),
                    idx = par.attr('data-index');

                if (!idx) {
                    return false;
                }
                result[idx] = obj ? par : 1;
            });
            return result;
        },
        _save: function() {
            if (this.options.save) {
                var save = {};
                for (var key in this.state) {
                    if (this.state[key] === 1) {
                        save[key] = 1;
                    }
                }
				var localStorageKey = this.options.cookie.name ? this.options.cookie.name : 'wpbeannavgoco';
                var allStates = JSON.parse(localStorage.getItem(localStorageKey)) || {};
                allStates[this.uuid] = save;
                localStorage.setItem(localStorageKey, JSON.stringify(allStates));
            }
        },
        _load: function() {
            if (this.options.save) {
				var localStorageKey = this.options.cookie.name ? this.options.cookie.name : 'wpbeannavgoco';
                var allStates = JSON.parse(localStorage.getItem(localStorageKey)) || {};
                this.state = allStates[this.uuid] || {};
            }
        },
        toggle: function(open) {
            var self = this,
                length = arguments.length;

            if (length <= 1) {
                self.$el.find('ul').each(function() {
                    var sub = $(this);
                    self._toggle(sub, open);
                });
            } else {
                var idx,
                    list = {},
                    args = Array.prototype.slice.call(arguments, 1);
                length--;

                for (var i = 0; i < length; i++) {
                    idx = args[i];
                    var sub = self.$el.find('ul[data-index="' + idx + '"]').first();
                    if (sub) {
                        list[idx] = sub;
                        if (open) {
                            var parents = self._parents(sub, true);
                            for (var pIdx in parents) {
                                if (!list.hasOwnProperty(pIdx)) {
                                    list[pIdx] = parents[pIdx];
                                }
                            }
                        }
                    }
                }

                for (idx in list) {
                    self._toggle(list[idx], open);
                }
            }
            self._save();
        },
        destroy: function() {
            $.removeData(this.$el);
            this.$el.find("li:has(ul) > a").unbind('click');
            this.$el.find("li:has(ul) > a > span").unbind('click');
        }
    };

    $.fn.wpbeannavgoco = function(options) {
        if (typeof options === 'string' && options.charAt(0) !== '_' && options !== 'init') {
            var callback = true,
                args = Array.prototype.slice.call(arguments, 1);
        } else {
            options = $.extend({}, $.fn.wpbeannavgoco.defaults, options || {});
        }
        return this.each(function(idx) {
            var $this = $(this),
                obj = $this.data('wpbeannavgoco');

            if (!obj) {
                obj = new Plugin(this, callback ? $.fn.wpbeannavgoco.defaults : options, idx);
                $this.data('wpbeannavgoco', obj);
            }
            if (callback) {
                obj[options].apply(obj, args);
            }
        });
    };

    $.fn.wpbeannavgoco.defaults = {
        caretHtml: '',
        expandIcon: '',
        accordion: false,
        openClass: 'open',
		currentExpanded: false,
		currentClasses: [],
        save: true,
        slide: {
            duration: 400,
            easing: 'swing'
        },
        onClickBefore: $.noop,
        onClickAfter: $.noop,
        onToggleBefore: $.noop,
        onToggleAfter: $.noop
    };
})(jQuery);